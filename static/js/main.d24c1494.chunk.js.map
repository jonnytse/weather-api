{"version":3,"sources":["container/App/App.module.scss","components/Header/Header.module.scss","components/Header/index.js","components/Header/Header.jsx","components/Weather/index.js","components/Weather/Weather.jsx","routes/Routes.jsx","container/App/App.js","serviceWorker.js","index.js","components/Weather/Weather.module.scss"],"names":["module","exports","Header","className","styles","header","Component","Main","state","allWeather","fetch","response","json","data","console","log","list","this","setState","i","length","name","main","temp","humidity","temp_min","temp_max","weatherList","map","dataList","weatherCard","Routes","path","exact","App","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gHACAA,EAAOC,QAAU,CAAC,IAAM,iBAAiB,WAAW,sBAAsB,gBAAgB,2BAA2B,aAAa,wBAAwB,WAAW,wB,mBCArKD,EAAOC,QAAU,CAAC,OAAS,yB,2MCCZC,E,uKCGP,OACI,yBAAKC,UAAWC,IAAOC,QACnB,mE,GAJKC,a,gDCDNC,E,4MCQXC,MAAQ,CACJC,WAAY,I,sMAIWC,MAAM,mDAAD,OAXf,UAWe,YAVd,UAUc,YATjB,UASiB,+BAZpB,qC,cAYFC,E,gBACaA,EAASC,O,OAO5B,IAPMC,E,OACNC,QAAQC,IAAIF,GACZC,QAAQC,IAAIF,EAAKG,MACjBC,KAAKC,SAAS,CAAET,WAAYI,EAAKG,OACjCF,QAAQC,IAAIE,KAAKT,MAAMC,YAGdU,EAAI,EAAGA,EAAIN,EAAKG,KAAKI,OAAQD,IAClCL,QAAQC,IACJF,EAAKG,KAAKG,GAAGE,KACbR,EAAKG,KAAKG,GAAGG,KAAKC,KAClBV,EAAKG,KAAKG,GAAGG,KAAKE,SAClBX,EAAKG,KAAKG,GAAGG,KAAKG,SAClBZ,EAAKG,KAAKG,GAAGG,KAAKI,U,sIA0B1B,OACI,yBAAKvB,UAAWC,IAAOuB,aACjBV,KAAKT,MAAMC,WAAWmB,KAAI,SAACC,GACzB,OACI,yBAAK1B,UAAWC,IAAO0B,aACnB,4BAAMD,EAASR,MACf,gDAAuBQ,EAASP,KAAKC,KAArC,SACA,wCAAeM,EAASP,KAAKE,SAA7B,KACA,wCAAeK,EAASP,KAAKG,SAA7B,SACA,4CAAmBI,EAASP,KAAKI,SAAjC,kB,GAxDNpB,aCMPyB,E,uKARP,OACI,kBAAC,IAAD,KACI,kBAAC,EAAD,CAASC,KAAK,IAAIC,OAAK,S,GAJlB3B,aCeN4B,E,uKAXX,OACE,yBAAK/B,UAAWC,IAAO8B,KACrB,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,+GACA,yBAAKC,GAAG,mB,GAPE7B,aCME8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,a,kBExI5BtD,EAAOC,QAAU,CAAC,YAAc,6BAA6B,YAAc,gC","file":"static/js/main.d24c1494.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__Qor96\",\"App-logo\":\"App_App-logo__2kI0Q\",\"App-logo-spin\":\"App_App-logo-spin__1WWn3\",\"App-header\":\"App_App-header__IgO--\",\"App-link\":\"App_App-link__3fGXv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1v0yI\"};","import Header from './Header';\n\nexport default Header;","import React, { Component } from 'react';\nimport styles from './Header.module.scss';\n\nclass Header extends Component {\n    render() {\n        return (\n            <div className={styles.header}>\n                <h1>Weather API React App practice</h1>\n            </div>\n        )\n    }\n}\n\nexport default Header;","import Main from './Weather';\n\nexport default Main;","import React, { Component } from 'react';\nimport styles from './Weather.module.scss';\n\nconst API_KEY = '0f33f5c78acf44e7d38b5f6706f6f59d';\nconst londonCityID = '2643744';\nconst bristolCityID = '4749005';\nconst romeCityID = '4219762';\n\nclass Weather extends Component {\n\n    state = {\n        allWeather: []\n    }\n\n    async componentDidMount() {\n        const response = await fetch(`http://api.openweathermap.org/data/2.5/group?id=${londonCityID},${bristolCityID},${romeCityID}&units=metric&appid=${API_KEY}`);\n        const data = await response.json();\n        console.log(data); //object\n        console.log(data.list) //array\n        this.setState({ allWeather: data.list });\n        console.log(this.state.allWeather);\n\n        // this console.logs the required individual elements\n        for (let i = 0; i < data.list.length; i++) {\n            console.log(\n                data.list[i].name,\n                data.list[i].main.temp,\n                data.list[i].main.humidity,\n                data.list[i].main.temp_min,\n                data.list[i].main.temp_max,\n            )\n        }\n        // // this displays data on the browser, albeit not via render method\n        // for (let i = 0; i < data.list.length; i++) {\n        //     let card = document.createElement('div')\n        //     card.innerHTML = `City Name: ${data.list[i].name}, Humidity(%): ${data.list[i].main.humidity}, Min.Temp (C): ${data.list[i].main.temp_min}, Max.Temp (C): ${data.list[i].main.temp_max}`\n        //     document.getElementById('container').appendChild(card)\n        // }\n    }\n\n    // //Using Sam's fetch API suggestion (Mars)\n    // fetch(\"http://api.openweathermap.org/data/2.5/group?id=2643744,4749005,4219762&units=metric&appid=0f33f5c78acf44e7d38b5f6706f6f59d\")\n    //     .then(response => response.json())\n    //     .then(data => console.log(data));\n    //     .catch(error => {\n    //         console.error(error);\n    //     });\n\n    // componentDidMount() {\n    //     fetch(`http://api.openweathermap.org/data/2.5/group?id=${londonCityID},${bristolCityID},${romeCityID}&units=metric&appid=${API_KEY}`)\n    //     .then(response => response.json())\n    //     .then(data => console.log(data.list));\n    // }\n\n    render() {\n        return (\n            <div className={styles.weatherList}>\n                { this.state.allWeather.map((dataList) => {\n                    return (\n                        <div className={styles.weatherCard}>\n                            <h2>{ dataList.name }</h2> \n                            <p>Current Temp (C): { dataList.main.temp }°C</p>\n                            <p>Humidity: { dataList.main.humidity }%</p>\n                            <p>Min Temp: { dataList.main.temp_min }°C</p>\n                            <p>Max Temp (C): { dataList.main.temp_max }°C</p>\n                        </div>\n                    ) \n                }) }\n            </div>\n        )\n    }\n}\n\nexport default Weather;","import React, { Component } from 'react';\nimport { Router } from '@reach/router';\nimport Weather from '../components/Weather';\n\nclass Routes extends Component {\n    render() {\n        return (\n            <Router>\n                <Weather path=\"/\" exact />\n            </Router>\n        );\n    }\n}\n\nexport default Routes;","import React, { Component } from 'react';\nimport styles from './App.module.scss';\nimport Header from '../../components/Header';\nimport Routes from '../../routes/Routes';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className={styles.App}>\n        <Header />\n        <Routes />\n        <h3>Presented data extracted from the Open Weather API:  openweathermap.org/current</h3>\n        <div id=\"container\"></div>\n      </div>\n    );\n  }  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"weatherList\":\"Weather_weatherList__1kMEF\",\"weatherCard\":\"Weather_weatherCard__2BZmx\"};"],"sourceRoot":""}